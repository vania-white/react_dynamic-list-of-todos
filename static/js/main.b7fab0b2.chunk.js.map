{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputTitle","defaultSelect","handleInputChange","target","value","name","setState","filterByTitle","todo","title","toLowerCase","includes","filterByStatus","completed","this","props","todos","checked","selectUser","randomTodos","filterTodos","filter","className","length","type","variant","color","onClick","label","id","onChange","map","key","readOnly","userId","React","Component","request","url","fetch","then","response","json","result","data","getUser","CurrentUser","currentUser","prevProps","clearUser","email","phone","PureComponent","App","selectedUserId","todoID","prevState","item","find","element","userID","i","random","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7fab0b2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputTitle: '',\n    defaultSelect: 'Show All',\n  }\n\n  handleInputChange = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterByTitle = (todo) => {\n    const { inputTitle } = this.state;\n\n    return todo.title.toLowerCase()\n      .includes(inputTitle.toLowerCase());\n  }\n\n  filterByStatus = (todo) => {\n    const { defaultSelect } = this.state;\n\n    switch (defaultSelect) {\n      case 'Show Completed': return todo.completed;\n      case 'Show Active': return !todo.completed;\n      default: return true;\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      checked,\n      selectUser,\n      randomTodos,\n    } = this.props;\n\n    const {\n      inputTitle,\n      defaultSelect,\n    } = this.state;\n\n    const filterTodos = todos\n      .filter(this.filterByTitle)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>{`Todos: ${filterTodos.length}`}</h2>\n        <div className=\"TodoList__container\">\n          <button\n            className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n            \"\n            type=\"button\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => {\n              randomTodos(todos);\n            }}\n          >\n            Randomize\n          </button>\n          <form\n            className=\"TodoList__form\"\n          >\n            <input\n              className=\"TodoList__input\"\n              label=\"Search todos\"\n              id=\"outlined-size-small\"\n              name=\"inputTitle\"\n              value={inputTitle}\n              onChange={this.handleInputChange}\n            />\n\n            <select\n              className=\"TodoList__select\"\n              name=\"defaultSelect\"\n              value={defaultSelect}\n              onChange={this.handleInputChange}\n            >\n\n              <option\n                name=\"all\"\n                value=\"Show All\"\n              >\n                Show All\n              </option>\n              <option\n                name=\"completed\"\n                value=\"Show Completed\"\n              >\n                Show Completed\n              </option>\n              <option\n                name=\"active\"\n                value=\"Show Active\"\n              >\n                Show Active\n              </option>\n            </select>\n          </form>\n        </div>\n        <ul className=\"TodoList__list\">\n          {filterTodos.map(todo => (\n            <li\n              className={className(`TodoList__item`, {\n                'TodoList__item--checked': todo.completed === true,\n                ' TodoList__item--unchecked': todo.completed === false,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  onChange={() => checked(todo.id)}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n                type=\"button\"\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  checked: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  randomTodos: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getAllTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((result) => {\n        this.setState({\n          currentUser: result,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((result) => {\n          this.setState({\n            currentUser: result,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <>\n        { currentUser === null ? (\n          <h1>Error dataBase</h1>\n        )\n          : (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${currentUser.id}`}</span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n              <p className=\"CurrentUser__email\">{currentUser.email}</p>\n              <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n              <button\n                className=\"button\"\n                type=\"button\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={() => {\n                  clearUser();\n                }}\n              >\n                Clear\n              </button>\n            </div>\n          )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  clearUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getAllTodos } from './api';\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then((todos) => {\n        const result = this.filterTodos(todos);\n\n        this.setState({ todos: result });\n      });\n  }\n\n  filterTodos = todos => todos\n    .filter(todo => typeof todo.userId === 'number')\n    .filter(todo => typeof todo.completed === 'boolean')\n    .filter(todo => todo.title !== '')\n\n  checked = (todoID) => {\n    this.setState((prevState) => {\n      const item = [...prevState.todos]\n        .find(element => element.id === todoID);\n\n      item.completed = !item.completed;\n\n      return {\n        todos: [...prevState.todos],\n      };\n    });\n  }\n\n  selectUser = (userID) => {\n    this.setState({ selectedUserId: userID });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  randomTodos = (todo) => {\n    for (let i = todo.length - 1; i > 0; i -= 1) {\n      const random = Math.floor(Math.random() * (i + 1));\n\n      // eslint-disable-next-line no-param-reassign\n      [todo[i], todo[random]] = [todo[random], todo[i]];\n    }\n\n    this.setState({ todos: todo });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            checked={this.checked}\n            selectUser={this.selectUser}\n            randomTodos={this.randomTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}